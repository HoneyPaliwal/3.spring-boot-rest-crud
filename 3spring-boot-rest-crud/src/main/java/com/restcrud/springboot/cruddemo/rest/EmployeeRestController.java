package com.restcrud.springboot.cruddemo.rest;

import com.restcrud.springboot.cruddemo.dao.EmployeeDAO;
import com.restcrud.springboot.cruddemo.entity.Employee;
import com.restcrud.springboot.cruddemo.service.EmployeeService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

@RestController
@RequestMapping("/api")
public class EmployeeRestController {

    /*
    //4. Directly getting from DAO layer
    //Controller <--->  DAO <---> DB
    private EmployeeDAO employeeDAO;

    @Autowired
    public EmployeeRestController(EmployeeDAO theEmployeeDAO) {
        employeeDAO = theEmployeeDAO;
    }

    // expose "/employees" and return a list of employees

    @GetMapping("/employees")
    public List<Employee> findAll() {
        return employeeDAO.findAll();
    }
     */

    //5. getting from via Service layer
    //Controller  <--->  Service <--->  DAO <---> DB
    private EmployeeService employeeService;

    @Autowired
    public EmployeeRestController(EmployeeService employeeService) {
        this.employeeService = employeeService;
    }

    @GetMapping("/employees")
    public List<Employee> findAll() {
        return employeeService.findAll();
    }

    @GetMapping("/employees/{id}")
    public Employee getEmployee(@PathVariable int id) {
        Employee employee = employeeService.readSingleEmployee(id);
        //if employee with that id is not present in the db
        if(employee==null){
            throw new RuntimeException("Employee id not found :" + id);
        }
        return employee;
    }

    @PostMapping("/employees/readMultiple")
    public Map<String, Object> readMultipleEmployees(@RequestBody List<Integer> ids) {
        List<Employee> foundEmployees = new ArrayList<>();
        List<Integer> notFoundIds = new ArrayList<>();

        for (Integer id : ids) {
            Employee employee = employeeService.readSingleEmployee(id);
            if (employee != null) {
                foundEmployees.add(employee);
            } else {
                notFoundIds.add(id);
            }
        }

        Map<String, Object> response = new HashMap<>();
        response.put("foundEmployees", foundEmployees);
        response.put("notFoundIds", notFoundIds);

        return response;
    }


    @PostMapping("/employees")
    public void createEmployee(@RequestBody Employee employee) {
        //If during creation of employee - if id is also provided then it should be set = 0
        //because id will be automatically generated by the DB
        // Neutralize ID to avoid client-side ID
        employee.setId(0);
        employeeService.createSingleEmployee(employee);
    }

    @PostMapping("/employees/batch")
    public void createMultipleEmployees(@RequestBody List<Employee> employees) {
        // Neutralize IDs to avoid client-side IDs
        for (Employee employee : employees) {
            employee.setId(0);
        }
        employeeService.createMultipleEmployees(employees);
    }

    @PutMapping("/employees")
    public void updateEmployee(@RequestBody Employee employee) {
        //check this employee exists or not
        Employee existingEmployee = employeeService.readSingleEmployee(employee.getId());
        if (existingEmployee == null) {
            throw new RuntimeException("Employee not found with id: " + employee.getId());
        }
        employeeService.updateSingleEmployee(employee);
    }

    @PutMapping("/employees/batch")
    public Map<String, Object> updateMultipleEmployees(@RequestBody List<Employee> employees) {
        List<Employee> toUpdate = new ArrayList<>();
        List<Integer> notFoundIds = new ArrayList<>();

        for (Employee employee : employees) {
            Employee existingEmployee = employeeService.readSingleEmployee(employee.getId());
            if (existingEmployee != null) {
                toUpdate.add(employee);
            } else {
                notFoundIds.add(employee.getId());
            }
        }

        if (!toUpdate.isEmpty()) {
            employeeService.updateMultipleEmployees(toUpdate);
        }

        Map<String, Object> response = new HashMap<>();
        response.put("updatedEmployees", toUpdate);
        response.put("notFoundIds", notFoundIds);

        return response;
    }

    @DeleteMapping("/employees/{id}")
    public void deleteEmployee(@PathVariable int id) {
        //check this employee exists or not
        Employee existingEmployee = employeeService.readSingleEmployee(id);
        if (existingEmployee == null) {
            throw new RuntimeException("Employee not found with id: " + id);
        }
        employeeService.deleteSingleEmployee(id);
    }

    @DeleteMapping("/employees/batch")
    public Map<String, Object> deleteMultipleEmployees(@RequestBody List<Integer> ids) {
        List<Integer> deletedIds = new ArrayList<>();
        List<Integer> notFoundIds = new ArrayList<>();

        for (Integer id : ids) {
            Employee existingEmployee = employeeService.readSingleEmployee(id);
            if (existingEmployee != null) {
                employeeService.deleteSingleEmployee(id);
                deletedIds.add(id);
            } else {
                notFoundIds.add(id);
            }
        }

        Map<String, Object> response = new HashMap<>();
        response.put("deletedIds", deletedIds);
        response.put("notFoundIds", notFoundIds);

        return response;
    }

    @DeleteMapping("/employees")
    public void deleteAllEmployees() {
        //check if db is empty or not
        List<Employee> allEmployees = employeeService.readAllEmployees();
        if (allEmployees.isEmpty()) {
            throw new RuntimeException("No employees found to delete.");
        }
        employeeService.deleteAllEmployees();
    }
}